// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  researchGroupId String?
  researchGroup   ResearchGroup? @relation(fields: [researchGroupId], references: [id], onDelete: SetNull)

  attachments Attachment[]
  members     Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([researchGroupId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
  projects ResearchProject[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model ResearchGroup {
  id          String  @id @default(uuid())
  name        String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text

  courses Course[]
  members Membership[]
  attachments ResearchGroupAttachment[]
  projects ResearchProject[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model ResearchGroupMember {
//   id     String @id @default(uuid())
//   userId String @db.Text
//   role   String @default("STUDENT") // rol

//   researchGroupId String
//   researchGroup   ResearchGroup @relation(fields: [researchGroupId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())

//   @@unique([userId, researchGroupId])
//   @@index([researchGroupId])
// }

model Membership {
  id               String   @id @default(uuid())
  userId           String
  role             String   @default("STUDENT")    // o enum de roles
  researchGroupId  String?  
  courseId         String?
  createdAt        DateTime @default(now())

  // Relaciones opcionales seg√∫n el tipo de pertenencia
  researchGroup   ResearchGroup? @relation(fields: [researchGroupId], references: [id])
  course          Course?        @relation(fields: [courseId],      references: [id])

  @@unique([userId, researchGroupId], map: "unique_rg_member")
  @@unique([userId, courseId],       map: "unique_course_member")
  @@index([researchGroupId])
  @@index([courseId])
}


model ResearchGroupAttachment {
  id              String         @id @default(uuid())
  name            String
  url             String         @db.Text

  researchGroupId String
  researchGroup   ResearchGroup  @relation(fields: [researchGroupId], references: [id], onDelete: Cascade)

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([researchGroupId])
}

model ResearchProject {
  id              String   @id @default(uuid())
  title           String   @db.Text
  description     String?  @db.Text

  researchGroupId String
  researchGroup   ResearchGroup @relation(fields: [researchGroupId], references: [id], onDelete: Cascade)

  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  
  createdBy       String?

  attachments     ResearchProjectAttachment[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([researchGroupId])
  @@index([categoryId])
}

model ResearchProjectAttachment {
  id           String   @id @default(uuid())
  name         String
  url          String   @db.Text

  projectId    String
  project      ResearchProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([projectId])
}

