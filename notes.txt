npx create-next-app@latest

 What is your project named? ... sga
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes

npx shadcn@latest init
Use --legacy-peer-deps

npx shadcn@latest add button
Use --legacy-peer-deps

npm install @clerk/nextjs
npx shadcn@latest add sheet

-> npx shadcn@latest add form
-> npx shadcn@latest add input
-> npm i axios
-> npm i react-hot-toast
-> npm i -D prisma
-> npx prisma init
https://www.prisma.io/docs/getting-started

  ||| Next steps:
1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.
3. Run prisma db pull to turn your database schema into a Prisma schema.
4. Run prisma generate to generate the Prisma Client. You can then start querying your database.
5. Tip: Explore how you can extend the ORM with scalable connection pooling, global caching, and real-time database events. Read: https://pris.ly/cli/beyond-orm
  |||

-> npm install prisma @prisma/client
-> npx prisma generate
-> npx prisma db push